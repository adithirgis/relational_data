---
title: "Relational Data"
author: "Adithi R. Upadhya"
date: "4 August, 2022"
format: 
  revealjs:
    theme: [ppt_theme.scss]
    incremental: true
   
execute:
  echo: true
  cache: true
---

## Recap

::: {.nonincremental}

`tidyverse` package functions like `select`, `group_by`, `summarize`, `mutate`, `filter`, `case_when`, `ggplot` etc. 
:::

::: footer
[Learn more](https://www.tidyverse.org/packages/)
:::



## Prerequsities

```{r}
library(tidyverse) 
```

::: footer
[Learn more](https://www.tidyverse.org/packages/)
:::

## Shortcut of the day

`Alt + Shift + K`

</br>

. . .

::: {.fragment .highlight-red}
Shows all keyboard shortcuts!
:::


## Relational Data
::: {.nonincremental}
-   Usually data is more than one table of data.
-   Collectively, multiple tables of data are called [**relational data**]{style="color:#185596"} because it is the relations that is important.
-   Relations are always defined between a pair of tables.
:::

## Relationships

![](img/relationship.png)

## Verbs

-   [**Mutating joins**]{style="color:#185596"}, which add new variables to one data frame from matching observations in another.

-   [**Filtering joins**]{style="color:#185596"}, which filter observations from one data frame based on whether or not they match an observation in the other table.

-   [**Set operations**]{style="color:#185596"}, which treat observations as if they were set elements.

## Keys 
::: {.nonincremental}
-   The variables used to connect each pair of tables are called keys.
-   A key is a variable (or set of variables) that uniquely identifies an observation.

:::

## Type of keys 

-   A `primary key` uniquely identifies an observation in its own table. 
-   A `foreign key` uniquely identifies an observation in another table.

## Understanding Keys

-   These keys cannot have duplicates. They can be combination of keys as well. 
-   Sometimes a table doesnâ€™t have an explicit primary key, there a new row can be created as `surrogate key` using `mutate()` or `row_number()`. 

</br>

. . .

::: {.fragment .highlight-red}
A variable can be both a primary key and a foreign key.
:::

## Relations 

::: nonincremental

-   A primary key and the corresponding foreign key in another table form a relation.
-   Relations are typically one-to-many. For example, each flight has one plane, but each plane has many flights. 
-   many-to-many relations are possible as well. Eg- each airline flies to many airports; each airport hosts many airlines.

:::

## Data used 

::: nonincremental 

`band_members` and `band_instruments`

These data sets describe band members and instruments used by the Beatles and Rolling Stones.

:::

```{r}
glimpse(band_members)
glimpse(band_instruments)
```

## Quiz 1

::: nonincremental
Imagine you wanted to find out which musician from a particular band played which instrument. What variables would you need? Identify the primary key to be used.

::: columns
::: {.column width="60%"}

a)    name, plays; primary key - name 
b)    name, band, plays; primary key - name, band, plays 

::: {.fragment .highlight-red}
c)   name, band, plays; primary key - name 
:::

d)    band, plays; primary key - band, plays 
:::

::: {.column width="40%"}
![](img/band_members.png)
![](img/band_instruments.png)
:::
:::
:::


## Concept Map

![](img/keys.png)

## Mutating Join 

::: nonincremental

-   A mutating join allows you to combine variables from two tables. 
-   It first matches observations by their keys, then copies across variables from one table to the other.

:::

## Understanding Joins 

::: columns

::: {.column width="70%"}

-   The colored column represents the `key` variable: these are used to match the rows between the tables. 
-   The grey column represents the `value` column that is carried along for the ride. 
-   A join is a way of connecting each row in x to zero, one, or more rows in y. 
-   The number of dots = the number of matches = the number of rows in the output.

:::

::: {.column width="30%"}
![](img/show_join.png){width="800" height="150"}
:::
:::


## Inner Join 

::: nonincremental

-   An inner join matches pairs of observations whenever their keys are equal.

-   The output of an inner join is a new data frame that contains the key, the x values, and the y values. 

-   Use `by` to tell dplyr which variable is the key.
:::

## Demo

::: nonincremental
```{r}
inner_join(band_instruments, band_members, by = "name")
```

![](img/inner_join.png){width="300" height="200"}
:::

## Left Join

::: nonincremental

A `left join` keeps all observations in `x`.

```{r}
band_instruments %>% 
  left_join(band_members, by = "name")
```

![](img/left_join.png){width="300" height="200"}

:::

## Right Join

::: nonincremental

A `right join` keeps all observations in `y`.

```{r}
band_instruments %>% 
  right_join(band_members, by = "name")
```

![](img/right_join.png){width="300" height="200"}
:::

## Full Join

::: nonincremental

A `full join` keeps all observations in `x` and `y`.

```{r}
band_instruments %>% 
  full_join(band_members, by = "name")
```

![](img/outer_join.png){width="300" height="200"}

:::

## Outer Joins

::: nonincremental

-   An outer join keeps observations that appear in at least one of the tables. 
-   These joins work by adding an additional `virtual` observation to each table.
-   This observation has a key that always matches (if no other key matches), and a value filled with `NA`.

:::

## Outer Joins

![](img/all_outer_join.png)

## Quiz 2

::: nonincremental

How to combine all observations from the two tables band_members and band_instruments to get a table as shown here.

::: columns
::: {.column width="40%"}

a)    left_join 

::: {.fragment .highlight-red}
b)    full_join 
:::

c)    right_join
d)    inner_join 
:::

::: {.column width="60%"}
![](img/band_members.png)
![](img/band_instruments.png)
![](img/quiz2.png)

:::
:::
:::




## Duplicate Keys 

::: nonincremental

One table has duplicate keys. This is useful when you want to add in additional information as there is typically a one-to-many relationship.

:::

## Demo

```{r}
x <- tribble(
  ~key, ~val_x,
     1, "x1",
     2, "x2",
     2, "x3"
)
y <- tribble(
  ~key, ~val_y,
     1, "y1",
     2, "y2"
)
left_join(x, y, by = "key")
```


## Defining `key` columns 
::: nonincremental

-   The default, `by = NULL`, uses all variables that appear in both tables, the so called natural join.
-   A character vector, `by = "x"`. This is like a natural join, but uses only some of the common variables. 
-   A named character vector: `by = c("a" = "b")`. This will match variable a in table `x` to variable `b` in table `y`. 

:::


## Concept Map

![](img/mutating_join.png)

## Filtering Joins

::: nonincremental

-   Affect the observations, not the variables. Never have duplicate rows.

-   `semi_join(x, y)` keeps all observations in `x` that have a match in `y`.

-   `anti_join(x, y)` drops all observations in `x` that have a match in `y`.

-   Anti-joins are useful for diagnosing join mismatches.

:::

## Semi join and Anti join

::: columns 

::: {.column width="50%"}

![](img/semi_join.png){width="800" height="150"}
:::

::: {.column width="50%"}

![](img/anti_join.png){width="800" height="150"}

:::
:::

## Join Problems 

::: nonincremental

-   Start by identifying the variables that form the primary key in each table.

-   Do not empirically look for a combination of variables that give a unique identifier.

-   Check that none of the variables in the primary key are missing.

-   Check that your foreign keys match primary keys in another table.

:::

## Set Operations 

::: nonincremental

-   The final type of two-table verb are the set operations.
-   All these operations work with a complete row, comparing the values of every variable. 
-   These expect the x and y inputs to have the same variables, and treat the observations like sets.

:::

## Set Operations types 

-   `intersect(x, y)`: return only observations in both `x` and `y`

-   `union(x, y)`: return unique observations in `x` and `y`

-   `setdiff(x, y)`: return observations in `x`, but not in `y`

## Demo 

```{r}
df1 <- tribble(
  ~x, ~y,
   1,  1,
   2,  1
)
df2 <- tribble(
  ~x, ~y,
   1,  1,
   1,  2
)

intersect(df1, df2)
```

## Quiz 3


::: nonincremental


How are joins and set operations different from each other? (Choose one or many)


::: {.fragment .highlight-red}
a)    set operations need same column / variable names while joins do not
:::

b)    no difference both are same, but have different syntax 

::: {.fragment .highlight-red}

c)    set operations have no keys but joins have keys  

:::

:::

## Resources

::: {.nonincremental}

-   R for Data Science [Chapter 13](https://r4ds.had.co.nz/relational-data.html#relational-data)
-   Slides made using [Quarto](https://meghan.rbind.io/blog/quarto-slides/#quarto-resources)
-   Art work by [Allison Horst](https://github.com/allisonhorst/stats-illustrations)
-   For more information on [joins](https://github.com/gadenbuie/tidyexplain) 
:::
